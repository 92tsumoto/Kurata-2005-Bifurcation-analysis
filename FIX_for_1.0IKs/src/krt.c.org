/* produced by Tsumoto. K 2008.10.27 */

#include <string.h>
#include <stdlib.h>
#include "syspara.h"

FILE *fopen(), *fpin, *fp0, *fp1, *fp2, *fp3;
int mode = 1;
int P = 2;
int beats = 30;

typedef double Number;

main(argc,argv)
int argc;
char **argv;
{
	int i,k,w,c,count;
	//int dim;
	MKL_INT info;
	MKL_INT ipiv[N];
	int ii=0;
	double x[NN];
	double t = 0.0;
	double tt;
	double time=0.0;
	double h;
	double v_old,dvdt,dvdt_new;
	double t_stok;
	double dist;
	char *tmpname;
	char cmd[BUFSIZ];
	double tend;

	tmpname = "temp";

	sprintf(cmd, "/usr/bin/cpp -P %s > %s", argv[1],tmpname);
	if(system(cmd) == -1){
		fprintf(stderr,"cannot open %s\n",argv[1]);
		exit(1);
	}
	if((fpin=fopen(tmpname,"r"))==NULL){
		fprintf(stderr,"cannot open %s\n",argv[1]);
		exit(1);
	}
	if ((fp1 = fopen("para.out","w")) == NULL){
		printf("Can't open File\n");
		exit(1);
	}
	if ((fp2 = fopen("data.out","w")) == NULL){
		printf("Can't open File\n");
		exit(1);
	}
	if ((fp3 = fopen("nstate.out","w")) == NULL){
		printf("Can't open File\n");
		exit(1);
	}

// parameter inputs
	input_para(fpin);

	if (var.write){
		if ((fp0 = fopen(argv[2],"w"))==NULL){
			fprintf(stderr, "%s cannot open.\n",argv[2]);
			exit(-1);
		}
	}

	for (ii = 0; ii < var.datas; ii++){
		long j;
		time = 0.0;
		tend = var.tend[ii];
		eig.n = N;
		eig.lda = LDA;
		eig.ldvl = LDVL;
		eig.ldvr = LDVR;

		for (i = 0; i < N; i++){ 
			x[i] = var.x0[ii][i];
		}

		tt = var.ndis*var.m;
		printf("ndis=%lf,m=%d,tt=%lf\n",var.ndis,var.m,tt);
		h = 2.0*M_PI / var.m;
		h *= var.tsign[ii];

		// parameter values input.
		val_consts(fp1);
		printf("exit consts\n");
	
		// initial values input.
		initial_mem();
		printf("exit memory initialization\n");

		printf("Istim=%lf\n",var.Istim_base);

		// Tablize exp functions.	
		printf("start tablization\n");
		make_ExpTable();
		printf("finished tablization\n");

		// Initialization time
		//var.dt = h;
		var.beat = 0;

		//while (count > 0){
		count=0;
		while (1){
			count++;
			// stoked the inital values of the system equation.
			for(k=0;k<N;k++){
				new.xn0[k]=x[k];
			}
			// making a unit matrix for the inital values of variational equation.
			c=0;
			for(k=0;k<NNN;k++){
				if(k==c*(N+1)){
					x[k+N]=1.0;
					c++;
				} else {
					x[k+N]=0.0;
				}
			}
			//print_matrix( "variational matrix", N, N, x, N );

			time -= h;
			for (j = 0; j< (var.ndis*var.m ); j++){
				t = h*j;
				time += h;
				var.Istim = var.Istim_base;
				runge(NN,h,x,t);
			//	fprintf(fp2,"%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\n",
			//		time/var.omega,var.Istim,x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9],x[10],x[11],x[12],x[13],x[14],x[15]);
			}
		
			for(k=0;k<N;k++){
				new.xn1[k]=x[k];
			}

			jacobi(x);

			//print_matrix( "DF0", N, N, new.A, N );

			//for(k=0;k<NNN;k++){
			//	printf("A[%d]=%e\n",k,new.A[k]);
			//}

			// making a unit matrix for the inital values of variational equation.
			c=0;
			for(k=0;k<NNN;k++){
				if(k==c*(N+1)){
					new.I[k]=1.0;
					c++;
				}else {
					new.I[k]=0.0;
				}
			}

			//print_matrix( "I", N, N, new.I, N );

			//DF(x)+I(N);
			cblas_daxpy(NNN, 1.0, new.A, 1.0, new.I, 1.0);

			//print_matrix( "DF+I", N, N, new.I, N );
			//for(k=0;k<NNN;k++){
			//	printf("A[%d]=%e, I[%d]=%e\n",k,new.A[k],k,new.I[k]);
			//}

			//DT0=DF(x);
			cblas_dcopy(NNN, new.I, 1, new.DF0, 1);
			
			//print_matrix( "DF0", N, N, new.DF0, N );

			//for(k=0;k<NNN;k++){
			//	printf("A[%d]=%e, I[%d]=%e, DF0[%d]=%e\n",k,new.A[k],k,new.I[k],k,new.DF0[k]);
			//}

			c=0;
			for(k=0;k<NNN;k++){
				if(k==c*(N+1)){
					x[i+N]=1.0;
					c++;
				} else {
					x[i+N]=0.0;
				}
			}

			time -= h;
			for (j = 0; j< (1.0-var.ndis)*var.m; j++){
				t = h*j;
				time += h;
				var.Istim = 0.0;
				runge(NN,h,x,t);
			//	fprintf(fp2,"%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\n",
			//		time/var.omega,var.Istim,x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9],x[10],x[11],x[12],x[13],x[14],x[15]);
			}
			
			for(k=0;k<N;k++){
				new.xn2[k]=x[k];
			}

			jacobi(x);
			//print_matrix( "DF1", N, N, new.A, N );

			// make a unit matrix
			c=0;
			for(k=0;k<NNN;k++){
				if(k==c*(N+1)){
					new.I[k]=1.0;
					c++;
				}else {
					new.I[k]=0.0;
				}
			}
			//print_matrix( "I", N, N, new.I, N );

			//DF1(x)+I(N);
			cblas_daxpy(NNN, 1.0, new.A, 1.0, new.I, 1.0);
			//print_matrix( "DF1+I", N, N, new.I, N );
			//DT1=DF1(x);
			cblas_dcopy(NNN, new.I, 1, new.DF1, 1);
			//print_matrix( "DF1", N, N, new.DF1, N );

			//DT = DT1*DT0*store_DT;
			//cblas_dgemm(CblasRowMajor,CblasTrans,CblasTrans, dim, dim, dim, 1.0, new.DF1, dim, new.DF0, dim, 0.0, new.DF, dim);
			cblas_dgemm(CblasColMajor,CblasNoTrans,CblasNoTrans, N, N, N, 1.0, new.DF1, N, new.DF0, N, 0.0, new.DF, N);

			//print_matrix( "DT", N, N, new.DF, N );

			//for(k=0;k<NNN;k++){
			//	printf("DF1[%d]=%e, DF0[%d]=%e, DF[%d]=%e\n",k,new.DF1[k],k,new.DF0[k],k,new.DF[k]);
			//}

			// make a unit matrix
			c=0;
			for(k=0;k<NNN;k++){
				if(k==c*(N+1)){
					new.I[k]=1.0;
					c++;
				}else {
					new.I[k]=0.0;
				}
			}

			//DF(x)-I(N);
			cblas_daxpy(NNN, 1.0, new.DF, 1.0, new.I, -1.0);
			//DF=DF1(x);
			cblas_dcopy(NNN, new.I, 1, new.DF, 1);
			cblas_dcopy(NNN, new.DF, 1, new.DF_eig, 1);

			//Fxn = xn2 - xn0;
			for(k=0;k<N;k++){
				new.Fxn[k]=new.xn2[k]-new.xn0[k];
				printf("Fxn[%d]=%e\n",k,new.Fxn[k]);
			}
			
			// solving 
			//x = xn0 - (DT -I(N))\Fxn; --> (DT-I(N))*(xn0-h) = -Fxn;
			info = LAPACKE_dgesv( LAPACK_COL_MAJOR, N, 1, new.DF, N, ipiv, new.Fxn, N);
			/* Check for the exact singularity */
			if( info > 0 ) {
				printf( "The diagonal element of the triangular factor of A,\n" );
				printf( "U(%i,%i) is zero, so that A is singular;\n", info, info );
				printf( "the solution could not be computed.\n" );
				exit( 1 );
			}
			/* Print solution */
			//print_matrix( "Solution", N, 1, new.Fxn, N );
			/* Print details of LU factorization */
			//print_matrix( "Details of LU factorization", N, N, new.DF, N );
			/* Print pivot indices */
			//print_int_vector( "Pivot indices", N, ipiv );
			
			// ここに解の判定は入る。
			//ddx = x-xn0;
			//dist = sum(fabs(ddx))/N;
			//if (dist < epsx) break;
			for(k=0;k<N;k++){
				dist+=fabs(new.Fxn[k]);
			}
			printf("dist=%e\n",dist/N);
			if(dist/N < 1e-6) {
				break;
			} else {
				dist =0;
				//new.xn0=new.xn0+new.Fxn
				cblas_daxpy(N, 1.0, new.xn0, 1.0, new.Fxn, 1.0);
				cblas_dcopy(N, new.Fxn, 1, new.xn0, 1);
				for(k=0;k<N;k++){
					x[k]=new.xn0[k];
					printf("iter=%d xn0[%d]=%e\n",count,k,new.xn0[k]);
				}
			}

			//if(count > 0){
			//	x = xn2;
			//	store_DT = DT;
			//}

			//if (sum(fabs(Fxn))/N < feps) break;

			//if(fabs(xn0) < 1/emax){
			//	temp = fabs(ddx*emax);
			//} else {
			//	temp = fabs(ddx./xn0);
			//}

			//rerror = min(temp,ddx);
			//edist = edist + rerror;

			//ddg = sum(sum(fabs(DT-I(N))))/(N*N);
			//if (ddg>gmax){
			//	printf("divergence of system\n");
			//} else if (edist > emax){
			//	printf("divergence of system\n");
			//}

			//if(iterN > kmax -1){
			//	printf("iterating too much\n");
			//}
		} //end while()
		
		for(k=0;k<N;k++){
			printf("iter=%d xn0[%d]=%e\n",count,k,new.xn0[k]);
		}
		//%
		//% Characteristic Multipliers
		//%
		//%[V, W] = eig( DT + eye(N) );
		// [V, W] = eig( DT );
		// chara = diag(W);
		// det_value = det(DT);

		/* Solve eigenproblem */
		//eig.info = LAPACKE_dgeev( LAPACK_COL_MAJOR, 'N', 'N', eig.n, new.DF_eig, eig.lda, eig.wr, eig.wi, eig.vl, eig.ldvl, eig.vr, eig.ldvr );
		eig.info = LAPACKE_dgeev( LAPACK_COL_MAJOR, 'N', 'N', eig.n, new.DF, eig.lda, eig.wr, eig.wi, eig.vl, eig.ldvl, eig.vr, eig.ldvr );
		/* Check for convergence */
		if( eig.info > 0 ) {
			printf( "The algorithm failed to compute eigenvalues.\n" );
			 exit( 1 );
		}
		/* Print eigenvalues */
		print_eigenvalues( "Eigenvalues", eig.n, eig.wr, eig.wi );
		/* Print left eigenvectors */
		//print_eigenvectors( "Left eigenvectors", eig.n, eig.wi, eig.vl, eig.ldvl );
		/* Print right eigenvectors */
		//print_eigenvectors( "Right eigenvectors", eig.n, eig.wi, eig.vr, eig.ldvr );

		exit(0);

		if (var.beat >= (beats-3)){
			fprintf(fp2,"%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\n",time,time/var.omega,x[0],x[12],x[15],
				ina.fast,ical.ica,ito.ik,ikr.ik,iks.ik,ik1.ik,inak.inak,ncx.jncx,inab.na,icab.ca,ipca.ca,var.Istim);
		}
				

		fprintf(fp3,"#beats=%d\n",var.beat);
		for(w=0;w<NN;w++){
			fprintf(fp3,"%e\n",x[w]);
		}

	} // end for ii-loop

	// closed file and open memories
	fclose(fp1);
	fclose(fp2);
	fclose(fp3);
	//fclose(fp4);
	//free(vmax);free(dvdtmax);free(apd);free(toneapd);free(ttwoapd);
	//free(rmbp);free(nair);free(cair);free(kir);
	closed_mem();
}


/* Auxiliary routine: printing a matrix */
void print_matrix( char* desc, MKL_INT m, MKL_INT n, double* a, MKL_INT lda ) {
	MKL_INT i, j;
	printf( "\n %s\n", desc );
	for( i = 0; i < m; i++ ) {
		for( j = 0; j < n; j++ ) printf( " %6.2f", a[i+j*lda] );
		printf( "\n" );
	}
}

/* Auxiliary routine: printing a vector of integers */
void print_int_vector( char* desc, MKL_INT n, MKL_INT* a ) {
	MKL_INT j;
	printf( "\n %s\n", desc );
	for( j = 0; j < n; j++ ) printf( " %6i", a[j] );
    printf( "\n" );
}

/* Auxiliary routine: printing eigenvalues */
void print_eigenvalues( char* desc, MKL_INT n, double* wr, double* wi )
{
	MKL_INT j;
	printf( "\n %s\n", desc );
	for( j = 0; j < n; j++ ) {
		if( wi[j] == (double)0.0 ) {
			printf( " %6.5e", wr[j] );
		} else {
			printf( " (%6.5e,%6.5e)", wr[j], wi[j] );
		}
	}
	printf( "\n" );
}

/* Auxiliary routine: printing eigenvectors */
void print_eigenvectors( char* desc, MKL_INT n, double* wi, double* v, MKL_INT ldv ) 
{
	MKL_INT i, j;
	printf( "\n %s\n", desc );
	for( i = 0; i < n; i++ ) {
		j = 0;
		while( j < n ) {
			if( wi[j] == (double)0.0 ) {
				printf( " %6.2f", v[i+j*ldv] );
				j++;
			} else {
				printf( " (%6.2f,%6.2f)", v[i+j*ldv], v[i+(j+1)*ldv] );
				printf( " (%6.2f,%6.2f)", v[i+j*ldv], -v[i+(j+1)*ldv] );
				j += 2;
			}
		}
		printf( "\n" );
	}
}
